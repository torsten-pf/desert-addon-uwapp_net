# Copyright (c) 2018 Regents of the SIGNET lab, University of Padova.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Padova (SIGNET lab) nor the 
#    names of its contributors may be used to endorse or promote products 
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: Roberto Francescon
# Version: 1.0.0
#

# if set to 1 the Application listen from the socket port provided in input
set opt(AppSocket)  1;
# Protocol to use for the Application socket, TCP or UDP
set opt(protocol) "%$%{TMPL_PROTOCOL}" ;

set opt(nn)       %$%{TMPL_NO_SENDERS} ;# no. of senders
set opt(freq)     25000.0
set opt(bw)       5000.0
set opt(bitrate)  4800.0
set opt(ack_mode) "setNoAckMode"

set opt(txpower)  135.0 
set opt(per_tgt)  0.1
set opt(rx_snr_penalty_db)  -10.0
set opt(tx_margin_db)	    10.0

set opt(start)    1       ;# Start time
set opt(stop)     %$%{TMPL_STOPTIME}     ;# Stop time
set opt(traffic)  0.1     ;# Packet check interval 
set opt(app_port_base)    %$%{TMPL_APP_PORT_BASE}  ;# Application socket port base (port = app_port_base + node_id)
set opt(exp_ID)       1   ;# Experiment ID
set opt(rngstream)    1   ;#  Random generator stream

set opt(app_pos_port_base)  %$%{TMPL_APP_POS_PORT_BASE}  ;# UDP position socket port (port = app_pos_port_base + node_id)

#####################
# Library Loading   #
#####################
# Load here all the NS-Miracle libraries you need
load libMiracle.so
load libMiracleBasicMovement.so
load libmphy.so
load libmmac.so
load libuwip.so
load libuwmll.so
load libuwstaticrouting.so
load libuwudp.so
# load libuwapplication.so
load libuwapp_net.so
load libudpposition.so
load libpackeruwapplication.so
load libuwaloha.so
load libuwcsmaaloha.so
load libuwal.so
load libpackeruwip.so
load libpackercommon.so
load libpackermac.so
load libpackeruwudp.so
load libuwinterference.so
load libuwphy_clmsgs.so
load libuwstats_utilities.so
load libuwphysical.so
load libuwconnector.so
load libuwmodem.so
load libuwevologicss2c.so
load libuwmmac_clmsgs.so

#############################
# NS-Miracle initialization #
#############################
# You always need the following two lines to use the NS-Miracle simulator
set ns [new Simulator]
$ns use-Miracle

#Declare the use of a Real Time Schedule (necessary for the interfacing with real hardware)
Scheduler/RealTime set slop_warning           0 ;# if > 0, print warning message when slop exceeds slop_
$ns use-scheduler RealTime

##################
# Tcl variables  #
##################
# time when actually to stop the simulation
set time_stop [expr "$opt(stop)+10"]

#Trace file name
set tf_name "/dev/null/"

#Open a file for writing the trace data
set tf [open $tf_name w]
$ns trace-all $tf

#random generator
global defaultRNG
for {set k 0} {$k < $opt(rngstream)} {incr k} {
	$defaultRNG next-substream
}

#########################
# Module Configuration  #
#########################
# Put here all the commands to set globally the initialization values of
# the binded variables (optional)

# variables for the ALOHA-CSMA module

# variables for the AL module
Module/UW/AL set Dbit 0
Module/UW/AL set PSDU 1400
Module/UW/AL set debug_ 0
Module/UW/AL set interframe_period  0.1  ;# < Time period [s] between two successive frame to be sent down.
Module/UW/AL set frame_set_validity 0
Module/UW/AL set force_endTx        0 ;# < 0 not force, otherwise force endTx

# variables for the packer(s)
UW/AL/Packer set SRC_ID_Bits 8
UW/AL/Packer set PKT_ID_Bits 8
UW/AL/Packer set FRAME_OFFSET_Bits 15
UW/AL/Packer set M_BIT_Bits 1
UW/AL/Packer set DUMMY_CONTENT_Bits 0
UW/AL/Packer set debug_ 0

NS2/COMMON/Packer set PTYPE_Bits 8
NS2/COMMON/Packer set SIZE_Bits 8
NS2/COMMON/Packer set UID_Bits 8
NS2/COMMON/Packer set ERROR_Bits 0
NS2/COMMON/Packer set TIMESTAMP_Bits 8
NS2/COMMON/Packer set PREV_HOP_Bits 8
NS2/COMMON/Packer set NEXT_HOP_Bits 38
NS2/COMMON/Packer set ADDR_TYPE_Bits 0
NS2/COMMON/Packer set LAST_HOP_Bits 0
NS2/COMMON/Packer set TXTIME_Bits 0
NS2/COMMON/Packer set debug_ 0

UW/IP/Packer set SAddr_Bits 8
UW/IP/Packer set DAddr_Bits 8
UW/IP/Packer set debug_ 0

NS2/MAC/Packer set Ftype_Bits 0
NS2/MAC/Packer set SRC_Bits 8
NS2/MAC/Packer set DST_Bits 8
NS2/MAC/Packer set Htype_Bits 0
NS2/MAC/Packer set TXtime_Bits 0
NS2/MAC/Packer set SStime_Bits 0
NS2/MAC/Packer set Padding_Bits 0
NS2/MAC/Packer set debug_ 0

UW/UDP/Packer set SPort_Bits 2
UW/UDP/Packer set DPort_Bits 2
UW/UDP/Packer set debug_ 0

UW/APP/uwApplication/Packer set SN_FIELD_ 8
UW/APP/uwApplication/Packer set RFFT_FIELD_ 5
UW/APP/uwApplication/Packer set RFFTVALID_FIELD_ 2
UW/APP/uwApplication/Packer set PRIORITY_FIELD_ 8
UW/APP/uwApplication/Packer set PAYLOADMSG_FIELD_SIZE_ 8
UW/APP/uwApplication/Packer set debug_ 0

Module/UW/APPNET set debug_               1
Module/UW/APPNET set period_              $opt(traffic)
#Module/UW/APPNET set PoissonTraffic_      0
Module/UW/APPNET set drop_out_of_order_   1    
#Module/UW/APPNET set pattern_sequence_    0     
Module/UW/APPNET set EXP_ID_              0
Module/UW/APPNET set destAddr_            0
Module/UW/APPNET set destPort_            0
#Module/UW/APPNET set max_read_length      255


Module/UW/PHYSICAL  set debug_                     0
Module/UW/PHYSICAL  set BitRate_                   $opt(bitrate)
Module/UW/PHYSICAL  set AcquisitionThreshold_dB_   10.0 
Module/UW/PHYSICAL  set RxSnrPenalty_dB_           $opt(rx_snr_penalty_db)
Module/UW/PHYSICAL  set TxSPLMargin_dB_            $opt(tx_margin_db)
Module/UW/PHYSICAL  set MaxTxSPL_dB_               $opt(txpower)
Module/UW/PHYSICAL  set MinTxSPL_dB_               10
Module/UW/PHYSICAL  set MaxTxRange_                50000
#Module/UW/PHYSICAL  set PER_target_                $opt(per_tgt)
Module/UW/PHYSICAL  set CentralFreqOptimization_   0
Module/UW/PHYSICAL  set BandwidthOptimization_     0
Module/UW/PHYSICAL  set SPLOptimization_           0
Module/UW/PHYSICAL  set TxPower_                   30 ;# used? uPa or W? Energy model or acoustic transmission?
Module/UW/PHYSICAL  set ConsumedEnergy_ 	         0
Module/UW/PHYSICAL  set NoiseSPD_                  -1 ;# Noise Spectral Power Density in W/Hz. 
Module/UW/PHYSICAL  set PER_target_                0

puts "Creating UW channel"
Module/UnderwaterChannel set debug_             0
Module/UnderwaterChannel set propSpeed_         1500.0
set channel [new Module/UnderwaterChannel]
MPropagation/Underwater set practicalSpreading_ 1.5
MPropagation/Underwater set debug_              0
MPropagation/Underwater set windspeed_          0
MPropagation/Underwater set shipping_           0
set propagation [new MPropagation/Underwater]
set data_mask [new MSpectralMask/Rect]
$data_mask setFreq       $opt(freq)
$data_mask setBandwidth  $opt(bw)

################################
# Procedure(s) to create nodes #
################################
# Define here one or more procedures that allow you to create as many different kind of nodes
proc createNode { node_id dest_id x y z} {
	global ns opt socket_port address channel propagation data_mask
	global app_ transport_ port_ routing_ ipif_ mac_ modem_ ipif_ mll_ uwal_ app_sink

	    # build the NS-Miracle node
    set node_ [$ns create-M_Node]

    # define the module(s) you want to put in the node
    # APPLICATION LAYER
    #set app_ [new Module/UW/APPLICATION]
    set app_  [new Module/UW/APPNET] ;  # new APP_POS is not an app layer module anymore, it just provides position
    # set app_  [new Module/UW/APP_NET] 
    # set app_2  [new Module/UW/APP_POS] 
    # set pos_ [new "Position/BM"]
    set pos_ [new "Position/UDP"]  ; # UDP position listener
    $node_ addPosition $pos_

    # Setup positions
    $pos_ setX_ $x
    $pos_ setY_ $y
    $pos_ setZ_ $z
    
    # $pos_ set debug_ 2
    $pos_ set udp_receive_port_ [expr $opt(app_pos_port_base) + $node_id]
    $pos_ start
    
    # TRANSPORT LAYER
    set transport_ [new Module/UW/UDP]

    # NETWORK LAYER
    # Static Routing
    set routing_ [new Module/UW/StaticRouting]
	
    # IP interface
    set ipif_ [new Module/UW/IP]
	
    # DATA LINK LAYER - MEDIA LINK LAYER
    set mll_ [new Module/UW/MLL]
    
    # DATA LINK LAYER - MAC LAYER
    set mac_ [new Module/UW/CSMA_ALOHA]

    set uwal_ [new Module/UW/AL]

    # PHY LAYER
    #set modem_ [new Module/UW/UwModem/EvoLogicsS2C]
    set modem_  [new Module/UW/PHYSICAL]

	  puts "Creating node $node_id... at position ($x,$y,$z) sending to address $dest_id"

	  # insert the module(s) into the node
    $node_ addModule 8 $app_ 1 "UWA"
    #$node_ addModule 8 $app_2 1 "UWA_POS"  ; # don't add connection with the lower layers for position node
    #$node_ addPlugin $app_2 1 "UWA_POS"  ; # derived from Plugin and not Module, no need for setting the layer number
    $node_ addModule 7 $transport_ 1 "UDP"
    $node_ addModule 6 $routing_ 1 "IPR"
    $node_ addModule 5 $ipif_ 1 "IPIF"
    $node_ addModule 4 $mll_ 1 "ARP"  
    $node_ addModule 3 $mac_ 1 "ALOHA"
    $node_ addModule 2 $uwal_ 1 "UWAL"
    $node_ addModule 1 $modem_ 1 "S2C" 

    $node_ setConnection $app_ $transport_ trace
    $node_ setConnection $transport_ $routing_ trace
    $node_ setConnection $routing_ $ipif_ trace
    $node_ setConnection $ipif_ $mll_ trace
    $node_ setConnection $mll_ $mac_ trace
    $node_ setConnection $mac_ $uwal_ trace
    $node_ setConnection $uwal_ $modem_ trace
    $node_ addToChannel  $channel    $modem_   trace

	# assign a port number to the application considered (CBR or VBR)
    set port_ [$transport_ assignPort $app_]
    $ipif_ addr $node_id
    $mac_ setMacAddr $node_id
    $modem_ set ID_ $node_id
	#$modem_ setModemAddress $address
    #$modem_ setLogLevel DBG
    # $modem_ setBurstMode
    $modem_ setPropagation $propagation
    $modem_ setSpectralMask $data_mask

    # set packer for Adaptation Layer
    set packer_ [new UW/AL/Packer]

    set packer_payload0 [new NS2/COMMON/Packer]  
    #$packer_payload0 printAllFields  

    set packer_payload1 [new UW/IP/Packer]

    set packer_payload2 [new NS2/MAC/Packer]
    set packer_payload3 [new UW/UDP/Packer]
    set packer_payload4 [new UW/APP/uwApplication/Packer]
    #$packer_payload4 printAllFields
    #$packer_payload4 printMap

    $packer_ addPacker $packer_payload0
    $packer_ addPacker $packer_payload1
    $packer_ addPacker $packer_payload2
    $packer_ addPacker $packer_payload3
    $packer_ addPacker $packer_payload4
    if {$opt(AppSocket) == 1} {
        $app_ set Socket_Port_ [expr $opt(app_port_base) + $node_id]
		    $app_ set PositionReceivePort [expr 10000 + $node_id]
    } else {
      $app_ setSocketProtocol "NONE"
    }
    $app_ set node_ID_  $node_id
    # $app_ print_log

    $uwal_ linkPacker $packer_   
    $uwal_ set nodeID $node_id

    $mac_ setNoAckMode
    $mac_ initialize	

    # connections at the application level
    $app_ set destAddr_ [expr $dest_id]
    $app_ set destPort_ 1

    $routing_ addRoute $dest_id $dest_id
    $mll_ addentry  $dest_id $dest_id

    return [list $app_ $node_]
}

#################
# Node Creation #
#################
# Create here all the nodes you want to network together
set depth 100
# createNode returns both app and node as list
set node_app_recv [createNode 1 255 0 0 $depth]
set app_recv [lindex $node_app_recv 0]
for {set id 0} {$id < $opt(nn)} {incr id}  {
  set node_app_send($id) [createNode [expr $id + 2] 255 1500 [expr 1500 * $id] $depth]
  set app_send($id) [lindex $node_app_send($id) 0]
}

################################
# Inter-node module connection #
################################
# Put here all the commands required to connect nodes in the network (optional), namely, specify end to end connections, fill ARP tables, define routing settings


#####################
# Start/Stop Timers #
#####################
# Set here the timers to start and/or stop modules (optional)
# e.g., 

#$ns at 0 "$modem_ start"

proc stopping_nodes {} {
  global opt app_recv node_app_recv app_send node_app_send
  puts "Stopping nodes..."
  # get the position object of the node and stop its thread
  [[lindex $node_app_recv 1] position] stop
  # stop the node
  $app_recv stop
  for {set id1 0} {$id1 < $opt(nn)} {incr id1}  {
    # get the position object of the node and stop its thread
    [[lindex $node_app_send($id1) 1] position] stop
    $app_send($id1) stop
  }
}

if {$opt(traffic) != 0} {
  $ns at $opt(start) "$app_recv start"
  for {set id1 0} {$id1 < $opt(nn)} {incr id1}  {
    $ns at $opt(start) "$app_send($id1) start"
  }
  $ns at $opt(stop) "stopping_nodes;"
}

###################
# Final Procedure #
###################
# Define here the procedure to call at the end of the simulation
proc finish_simple {} {
   
   global ns tf tf_name	
   # computation of the statics

   puts "done!"
   #puts "tracefile: $tf_name"
   # save traces
   $ns flush-trace 
   # close files
   close $tf
}
proc finish {} {
    global ns opt tf tf_name	
    global app_recv app_send channel propagation

    puts "---------------------------------------------------------------------"
    puts "Simulation summary"
    #puts "number of nodes  : $opt(nn)"
    #puts "packet size      : $opt(pktsize) byte"
    #puts "app period       : $opt(cbr_period) s"
    puts "number of nodes  : [expr $opt(nn) + 1]"
    puts "number of senders: $opt(nn)"
    puts "simulation length: [expr $opt(stop) - $opt(start)] s"
    puts "tx frequency     : $opt(freq) Hz"
    puts "tx bandwidth     : $opt(bw) Hz"
    puts "bitrate          : $opt(bitrate) bps"
    puts "---------------------------------------------------------------------"

    set sum_cbr_throughput     0
    set sum_per                0
    set sum_cbr_sent_pkts      0
    set sum_cbr_rcv_pkts       0   
    set sum_cbr_queue_pkts		 0

    set cbr_throughput         [$app_recv getthr]
    set cbr_rcv_pkts           [$app_recv getrecvpkts]
    set sum_cbr_throughput [expr $sum_cbr_throughput + $cbr_throughput]
    set sum_cbr_rcv_pkts   [expr $sum_cbr_rcv_pkts + $cbr_rcv_pkts]    
        
    puts "Node 0 packets (sent/rcvd): [$app_recv getsentpkts]/$cbr_rcv_pkts"
    for {set id1 0} {$id1 < $opt(nn)} {incr id1}  {
      set cbr_sent_pkts          [$app_send($id1) getsentpkts]              
      set cbr_queue_pkts			   [$app_send($id1) getrecvpktsqueue]
      set sum_cbr_sent_pkts  [expr $sum_cbr_sent_pkts + $cbr_sent_pkts]      
      set sum_cbr_queue_pkts [expr $sum_cbr_queue_pkts + $cbr_queue_pkts]
      puts "Node [expr $id1 + 1] packets (sent/rcvd): $cbr_sent_pkts/[$app_send($id1) getrecvpkts]"
    }
    
    # puts "Mean Throughput          : [expr ($sum_cbr_throughput/($opt(nn)))]"

	  puts "Sent packets              : $sum_cbr_sent_pkts"
    puts "Received packets (Node 0) : $sum_cbr_rcv_pkts"
    if { $sum_cbr_sent_pkts > 0 } {
      puts "Packet Delivery Ratio     : [expr 100.0 * $sum_cbr_rcv_pkts / $sum_cbr_sent_pkts ] %"
    } else {
      puts "Packet Delivery Ratio     : 0 %"
    }
    $ns flush-trace
    close $tf
}

##################
# Run simulation #
##################
# Specify the time at which to call the finish procedure and halt ns

$ns at [expr $time_stop] "finish; $ns halt"

# You always need the following line to run the NS-Miracle simulator
$ns run
